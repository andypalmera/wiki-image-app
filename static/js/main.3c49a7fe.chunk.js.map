{"version":3,"sources":["components/ImageSearch/ImageSearch.js","components/ImageList/ImageList.js","App.js","components/ImageView/ImageView.js","Router.js","serviceWorker.js","index.js"],"names":["ImageSearch","props","className","onSubmit","getInfo","type","placeholder","error","name","autoComplete","onChange","e","changeValue","value","ImageList","key","id","images","map","image","src","largeImageURL","alt","tags","to","pathname","state","App","setState","target","a","async","preventDefault","searchValue","URL","fetch","request","json","response","total","notFound","hits","this","React","Component","ImageView","location","user","pageURL","rel","href","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c49a7fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ImageSearch.css';\r\n\r\nconst ImageSearch = (props) => {\r\n    return (\r\n        <div className=\"image-search\">\r\n            <div className=\"image-search-title-container\">\r\n                <h1 className=\"image-search-title\"> WIKI IMAGE</h1>\r\n            </div>\r\n            <form onSubmit={props.getInfo} className=\"image-search-form\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={props.error === null ? 'type a value' : 'type a valid search value'}\r\n                    className=\"Image-input\"\r\n                    name=\"searchValue\"\r\n                    autoComplete=\"off\"\r\n                    onChange={(e) => props.changeValue(e)}\r\n                    value={props.value}\r\n                />\r\n                <button className=\"btn-personal-style\">Search</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nexport default ImageSearch;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './ImageList.css';\r\n\r\nconst ImageList = (props) => {\r\n    return (\r\n        <div key={props.id} className=\"image-list\">\r\n            {props.images.map((image) => {\r\n                return (\r\n                    <div key={image.id} className=\"image-item\">\r\n                        <img src={image.largeImageURL} alt={image.tags} />\r\n\r\n                        <Link\r\n                            to={{\r\n                                pathname: `/image/${image.id}`,\r\n                                state: { image },\r\n                            }}\r\n                        >\r\n                            <button>View</button>\r\n                        </Link>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ImageSeach from './components/ImageSearch/ImageSearch';\r\nimport ImageList from './components/ImageList/ImageList';\r\n\r\nconst KeyApi = '15981936-235ace528bea7fa1f82abfc14';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            image: [],\r\n            error: null,\r\n            notFound: false,\r\n            value: '',\r\n        };\r\n    }\r\n    changeValue = (e) => {\r\n        this.setState({\r\n            value: e.target.value,\r\n        });\r\n    };\r\n\r\n    getInfo = async (e) => {\r\n        e.preventDefault();\r\n        let searchValue = this.state.value;\r\n        const URL = `https://pixabay.com/api/?key=${KeyApi}&q=${searchValue}&image_type=photo`;\r\n        const request = await fetch(URL);\r\n        const response = await request.json();\r\n\r\n        if (!searchValue) {\r\n            this.setState({\r\n                error: !this.state.error,\r\n                value: '',\r\n            });\r\n            return false;\r\n        } else {\r\n            if (response.total < 1) {\r\n                this.setState({\r\n                    notFound: !this.state.notFound,\r\n                    value: '',\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    notFound: false,\r\n                    image: response.hits,\r\n                    error: null,\r\n                    value: '',\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <ImageSeach getInfo={this.getInfo} error={this.state.error} changeValue={this.changeValue} value={this.state.value} />\r\n                {this.state.notFound ? <div className=\"not-found\"> Not found</div> : <ImageList images={this.state.image} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './ImageView.css';\r\n\r\nconst ImageView = (props) => {\r\n    const { largeImageURL, tags, user, pageURL } = props.location.state.image;\r\n    return (\r\n        <div className=\"image-container\">\r\n            <img src={largeImageURL} alt={tags} />\r\n            <p>&copy; pixxaBay</p>\r\n            <h4 className=\"holavale\">\r\n                Credits: <span> {user}</span>\r\n            </h4>\r\n            <h4>\r\n                Download:{' '}\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={pageURL}>\r\n                    go to download\r\n                </a>\r\n            </h4>\r\n            <Link\r\n                to={{\r\n                    pathname: '/',\r\n                }}\r\n            >\r\n                <button>Home</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageView;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport App from './App';\r\nimport ImageView from './components/ImageView/ImageView';\r\n\r\nconst Router = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" component={App} exact />\r\n                <Route path=\"/image/:id\" component={ImageView} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n};\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}